[ ] review 'using' Scale Coord Angle etc terminology
[ ] struct TaskInfo{eip,eflags,bits,eax,ebx...}
[ ]   enable/disable task
[ ] move draw_x into Bitmap?
[ ] Osca::Game multiple instances
[ ]   PhyicsStates instance
[ ]   World instance
[ ]   Game instance
[ ] libge: handle objects with null bounding points indexes, no normals
[ ] better clock, higher resolution than the default 18.2 Hz
[ ] implement a unique_ptr<T>
[o] heap
[x]   step 1. a vector of [*ptr,size] elements pointing to freed memory. O(n) free, O(n) alloc
[ ]   step 2. hash table on size with vectors [*ptr,size]. O(n/x)
[ ]   step 3. libge heap optimized for Object. O(1) free, O(n/x) alloc
[ ]      override 'void* operator new(size_t s)' and 'void operator delete(void*)'
[ ]      [*heptr,*obj] heap entry pointer to used slot, pointer to object that is updated when the slot is moved
[o] render convex polygons
[o]   ObjectDef: polygons with indexes to definition points
[x]     step 1. use bounding shape polygon
[ ]       review
[ ]     step 2. define {color,{npts,pts_ix[]}}
[ ]   clip to viewport
[x]   render lines -> polygon outline.
[ ] multiple bounding shapes per object to allow non-convex shape
[o] input text
[x]   step 1. one keyboard buffer for the system
[ ]   step 2. "osca_keyb_task" pointer to function that should read keyboard
[ ]   step 3. a way to switch keyboard focus to other tasks
[x] investigate why any -O other than -O0,-O1,-Og breaks osca_keyb.next_scan_code(). see comment in function.
[ ] review const correctness regarding const bmp().data().address() then write to pointer
[ ]   const Bitmap&dbmp=dsp.bmp(); then mutate data in const dbmp
[ ] lib: PrinterToBitmap pos in pixels
[ ] lib: PrinterToConsole pos in characters
[x] osca: time_ms -> implemented in World
[x] extract boot.cc to boot.S
[x] use link.ld to build binary? ok.
[x] inline assembler for pz_memcpy
[ ]   clobbers memory?
[ ]   movsl,movsw,movsb optimization?
[x] test writing to second meg to confirm enabling of a20 line
[x]   is enabled by default in qemu and on asus zenbook
[x] bitmap
[ ]   optimized for 32b memcpy?
[o] sprite with transparency
[ ]   collision detection
[ ]     with background
[ ]     with other sprites
[o] 5x6 font (30 bits/character)
[x]   c code generated from font file -> done manually
[x] inline assembler character renderer -> written in C++
[x] print hex numbers
[x] scan code to ascii
[o] bmp printer
[x]   hex
[x]   characters
[x]   strings
[ ]   integers
[ ]   floats
[ ] pointing device
[ ]   events
[ ]     {byte event=move,byte pad,short x,short y} 6B
[ ]     {byte event=click,byte btn} 2B
[ ] kernel events to task
[ ]   pointer to task record of focused task
[ ]   in task record - pointer to ring buffer of events
[ ]   keyboard event
[ ]     {byte event=key,byte scan_code} 2B
[ ] task event loop
[ ]   task.next_event()->byte* // pointer to next event or 0 if done
