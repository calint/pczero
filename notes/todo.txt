[x] libge: renaming
[ ] libge: Object: allow change of ObjectDef
[ ] lib: Data::address_offset: check if within bounds?
[ ] lib: Data::to: check if within bounds?
[ ] lib: Bitmap::address_offset: check if within bounds?
[ ] lib: Bitmap::address_offset: (...)*sizeof(T) can overflow?
[ ] kernel: improved Heap that does not fragment (o1store?)
[ ] osca: read more sectors
[ ] libge: Object: cached transformed points without translation
[ ] libge: ObjectDef: bounding points and bounding planes. see http://github.com/calint/glos
[ ] implement a unique_ptr<T>
[o] kernel: heap
[x]   step 1. a vector of [*ptr,size] elements pointing to freed memory. O(n) free, O(n) alloc
[ ]   step 2. hash table on size with vectors [*ptr,size]. O(n/x)
      => if 'size' is not arbitrary then there is a set of sizes depending on the program
         example. cached world coordinates depend on the compile time known sizes
[x]   step 3. libge heap optimized for Objects. O(1) free, O(1) alloc
              => 'o1store' from "https://github.com/calint/glos"
[ ] lib: PrinterToBitmap pos in pixels
[ ] lib: PrinterToConsole pos in characters
[ ] libge: better naming of public members
------------------------------------------------------------------------------
[x] osca: is it necessary to do fwait on i386+387?
[x]   "co-processors from 287 on do not need it"
[x]     http://computer-programming-forum.com/46-asm/e6d7eab90bbcb1c2.htm
[x]   https://stackoverflow.com/questions/65418457/masm-doesnt-insert-x87-wait-prefixes-with-some-combinations-of-cpu-and-fpu-dire
[x] task switch the state of FPU
[x]   FSAVE and FRSTOR. supported on "-march=i386+387"
[x]     80386 System Software Writers Guide 1987: 7.1.2.1 COPROCESSOR CONTEXT SWITCHING
[x]     80386 Programmer's Reference Manual -- Section 11.1
[x]     Intel® 64 and IA-32 Architectures Software Developer’s Manual page 3-424 Vol. 2A: FSAVE/FNSAVE—Store x87 FPU State
[x] review 'using' Scale Coord Angle Vertex etc terminology
[x] lib2d move Point to lib. Replace Coords.
[x] osca: task_id (lower 16 bits of task.bits?)
[x]   keyboard_focus
[x] review default values and where it is necessary to specify
[x]   although redundant, initializing to 0, false, nullptr is ok. initialize everything.
[x] struct TaskInfo{eip,eflags,bits,eax,ebx...}
[x]   enable/disable task
[-] Osca::Game multiple instances
    => ok for toy application
[-]   PhyicsStates instance
[-]   World instance
[-]   Game instance
[x] libge: handle objects with null bounding points indexes, no normals
[x] better clock, higher resolution than the default 18.2 Hz -> 1024 Hz RTC
[x] osca: time_ms -> implemented in World
[x] extract boot.cc to boot.S
[x] use link.ld to build binary? ok.
[x] investigate why any -O other than -O0,-O1,-Og breaks osca_keyb.next_scan_code()
    => osca did not load the whole program
[x] test writing to second meg to confirm enabling of a20 line
[x]   is enabled by default in qemu and on asus zenbook
[x] 5x6 font (30 bits/character)
[x]   c code generated from font file 
      => done manually
[x] inline assembler character renderer
    => written in C++
[x] print hex numbers
[x] scan code to ascii
[x] input text
[x]   step 1. one keyboard buffer for the system
[x]   step 2. "osca_keyb_task" pointer to function that should read keyboard
[-]     a non-hack implementation
        => good enough for toy application
[x]   step 3. a way to switch keyboard focus to other tasks
[-] sprite with transparency
    => sprites not implemented
[-]   collision detection
[-]     with background
[-]     with other sprites
[-] pointing device
[-]   events
[-]     {byte event=move,byte pad,short x,short y} 6B
[-]     {byte event=click,byte btn} 2B
[-] kernel events to task
[-]   pointer to task record of focused task
[-]   in task record - pointer to ring buffer of events
[-]   keyboard event
[-]     {byte event=key,byte scan_code} 2B
[-] task event loop
[-]   task.next_event()->byte* // pointer to next event or 0 if done
[x] bitmap
[-]   optimized for 32b memcpy?
[x] bmp printer
[x]   hex
[x]   characters
[x]   strings
[x]   integers
[-]   floats
[x] render convex polygons
[x]   ObjectDef: polygons with indexes to definition points
[x]     step 1. use bounding shape polygon
[x]       review
[-]     step 2. define {color,{npts,pts_ix[]}}
[-]   clip to viewport
[x]   render lines -> polygon outline.
[-] multiple bounding shapes per object to allow non-convex shape
    => ok for toy application
[x] default initializing objects with '{}' is superfluous
    => built in types receive undefined values
[x] inline assembler for pz_memcpy
[x]   clobbers memory?
[-]   movsl,movsw,movsb optimization?
[x] review const correctness regarding const bmp().data().address() then write to pointer
[x]   const Bitmap&dbmp=dsp.bmp(); then mutate data in const bmp
      => ok
[x] move draw_x into Bitmap?
[-] move the stack memory of the vga buffer for better performance (vga is slow)
    => toy application done. displaying heap and stack on screen is nice
[x] osca: get EBDA usable memory setting application top of memory
    => using safe method of avoiding EBDA
[x] resolve the unknown interrupt on asus zenbook hardware
    => isa irq 7: lpt1  spurious and unreliable
[x] Object::time represented as float does not work well with osca_timer_hi > 3
    => time represented as double and time step as float
    => when double > 65535.0 cast to uint16 results in 0
[x] osca: don't use current task stack to push/pop
    => isr_kbd uses osca stack (callback to c might generate a substantial stack footprint)
    => osca_yield does one 32 bit push/pop on current task stack
    => isr_tmr does one 16 bit push/pop on current task stack
[x] build with -g and then link a stripped version of that object file
